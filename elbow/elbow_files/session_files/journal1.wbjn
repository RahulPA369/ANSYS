# encoding: utf-8
# 2021 R1
SetScriptVersion(Version="21.1.216")
template1 = GetTemplate(TemplateName="Fluid Flow")
system1 = template1.CreateSystem()
system1.DisplayText = "elbow"
Save(Overwrite=True)
Update()
Refresh()
geometry1 = system1.GetContainer(ComponentName="Geometry")
geometry1.Edit()
geometry1.Exit()
meshComponent1 = system1.GetComponent(Name="Mesh")
meshComponent1.Refresh()
mesh1 = system1.GetContainer(ComponentName="Mesh")
mesh1.Edit()
mesh1.Exit()
setupComponent1 = system1.GetComponent(Name="Setup")
setupComponent1.Refresh()
setup1 = system1.GetContainer(ComponentName="Setup")
fluentLauncherSettings1 = setup1.GetFluentLauncherSettings()
fluentLauncherSettings1.SetEntityProperties(Properties=Set(Precision="Double", EnvPath={}, RunParallel=True, MpiType="msmpi"))
setup1.Edit()
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup1.SendCommand(Command='/file/set-tui-version "21.1"(cx-gui-do cx-activate-item "Key Behavioral Changes*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Domain)*Table1*Table3(Mesh)*PushButton3(Units)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Set Units*List1(Quantities)\" '( 43))(cx-gui-do cx-activate-item \"Set Units*List1(Quantities)\")(cx-gui-do cx-set-list-selections \"Set Units*Frame3*List1(Units)\" '( 2))(cx-gui-do cx-activate-item \"Set Units*Frame3*List1(Units)\")(cx-gui-do cx-activate-item \"Set Units*PanelButtons*PushButton2(Cancel)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Domain)*Table1*Table3(Mesh)*PushButton3(Units)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Set Units*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Domain)*Table1*Table3(Mesh)*PushButton4(Check)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*PopupMenuCheck*Perform Mesh Check")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Domain)*Table1*Table3(Mesh)*PushButton5(  Quality)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*PopupMenuQuality*Evaluate Mesh Quality")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Solver)*PushButton1(General)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Solver)*PushButton1(General)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Solver)*PushButton1(General)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Solver)*PushButton1(General)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Solver)*PushButton1(General)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Solver)*PushButton2(Operating Conditions)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Solver)*PushButton1(General)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Operating Conditions*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Solver)*PushButton1(General)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Solver)*PushButton1(General)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Solver)*PushButton1(General)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Solver)*PushButton1(General)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Solver)*PushButton1(General)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Models)*PushButton10(More)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Models)*CheckButton1(Energy)" #t)(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Models)*CheckButton1(Energy)")(cx-gui-do cx-set-toggle-button2 "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Models)*CheckButton1(Energy)" #f)(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Models)*CheckButton1(Energy)")(cx-gui-do cx-set-toggle-button2 "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Models)*CheckButton1(Energy)" #t)(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Models)*CheckButton1(Energy)")(cx-gui-do cx-set-toggle-button2 "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Models)*CheckButton1(Energy)" #f)(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Models)*CheckButton1(Energy)")(cx-gui-do cx-set-toggle-button2 "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Models)*CheckButton1(Energy)" #t)(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Models)*CheckButton1(Energy)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Models)*PushButton4(Viscous)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Viscous Model*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*PushButton1(Solver)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*PushButton1(Models)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Models)*PushButton4(Viscous)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "Viscous Model*Table1*ToggleBox1(Model)*k-epsilon (2 eqn)" #t)(cx-gui-do cx-activate-item "Viscous Model*Table1*ToggleBox1(Model)*k-epsilon (2 eqn)")(cx-gui-do cx-set-toggle-button2 "Viscous Model*Table1*ToggleBox20(Near-Wall Treatment)*Enhanced Wall Treatment" #t)(cx-gui-do cx-activate-item "Viscous Model*Table1*ToggleBox20(Near-Wall Treatment)*Enhanced Wall Treatment")(cx-gui-do cx-activate-item "Viscous Model*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*PushButton1(Materials)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Materials)*PushButton1(Create/Edit)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-text-entry \"Create/Edit Materials*Table1*Frame1*Table1*TextEntry1(Name)\" \"water\")(cx-gui-do cx-set-real-entry-list \"Create/Edit Materials*RealEntry10\" '( 1000))(cx-gui-do cx-set-toggle-button2 \"Create/Edit Materials*Table1*Frame1*Frame2*ToggleBox1(Order Materials by)*Chemical Formula\" #t)(cx-gui-do cx-activate-item \"Create/Edit Materials*Table1*Frame1*Frame2*ToggleBox1(Order Materials by)*Chemical Formula\")(cx-gui-do cx-set-toggle-button2 \"Create/Edit Materials*Table1*Frame1*Frame2*ToggleBox1(Order Materials by)*Name\" #t)(cx-gui-do cx-activate-item \"Create/Edit Materials*Table1*Frame1*Frame2*ToggleBox1(Order Materials by)*Name\")(cx-gui-do cx-set-text-entry \"Create/Edit Materials*Table1*Frame1*Table1*TextEntry2(Chemical Formula)\" \"h2o\")(cx-gui-do cx-set-toggle-button2 \"Create/Edit Materials*Table1*Frame1*Frame2*ToggleBox1(Order Materials by)*Chemical Formula\" #t)(cx-gui-do cx-activate-item \"Create/Edit Materials*Table1*Frame1*Frame2*ToggleBox1(Order Materials by)*Chemical Formula\")(cx-gui-do cx-set-toggle-button2 \"Create/Edit Materials*Table1*Frame1*Frame2*ToggleBox1(Order Materials by)*Name\" #t)(cx-gui-do cx-activate-item \"Create/Edit Materials*Table1*Frame1*Frame2*ToggleBox1(Order Materials by)*Name\")(cx-gui-do cx-set-text-entry \"Create/Edit Materials*Table1*Frame1*Table1*TextEntry1(Name)\" \"water\")(cx-gui-do cx-set-real-entry-list \"Create/Edit Materials*RealEntry10\" '( 1000))(cx-gui-do cx-set-real-entry-list \"Create/Edit Materials*RealEntry12\" '( 4216))(cx-gui-do cx-set-real-entry-list \"Create/Edit Materials*RealEntry14\" '( 0.677))(cx-gui-do cx-set-real-entry-list \"Create/Edit Materials*RealEntry16\" '( 0.0008))(cx-gui-do cx-set-real-entry-list \"Create/Edit Materials*RealEntry16\" '( 0.0008))")
setup1.SendCommand(Command="(cx-gui-do cx-activate-item \"Create/Edit Materials*Table1*Frame1*Frame2*ButtonBox2*PushButton1(Fluent Database)\")(cx-gui-do cx-set-list-selections \"Fluent Database Materials*Table1*Frame1*List1(Materials)\" '( 85))(cx-gui-do cx-activate-item \"Fluent Database Materials*Table1*Frame1*List1(Materials)\")(cx-gui-do cx-activate-item \"Fluent Database Materials*PanelButtons*PushButton1(Close)\")")
setup1.SendCommand(Command="(cx-gui-do cx-activate-item \"Create/Edit Materials*Table1*Frame1*Frame2*ButtonBox2*PushButton1(Fluent Database)\")(cx-gui-do cx-set-toggle-button2 \"Fluent Database Materials*Table1*Frame1*Frame3*ToggleBox2(Order Materials by)*Chemical Formula\" #t)(cx-gui-do cx-activate-item \"Fluent Database Materials*Table1*Frame1*Frame3*ToggleBox2(Order Materials by)*Chemical Formula\")(cx-gui-do cx-set-toggle-button2 \"Fluent Database Materials*Table1*Frame1*Frame3*ToggleBox2(Order Materials by)*Name\" #t)(cx-gui-do cx-activate-item \"Fluent Database Materials*Table1*Frame1*Frame3*ToggleBox2(Order Materials by)*Name\")(cx-gui-do cx-set-list-selections \"Fluent Database Materials*Table1*Frame1*List1(Materials)\" '( 85 562))(cx-gui-do cx-activate-item \"Fluent Database Materials*Table1*Frame1*List1(Materials)\")(cx-gui-do cx-set-list-selections \"Fluent Database Materials*Table1*Frame1*List1(Materials)\" '( 85 562 563))(cx-gui-do cx-activate-item \"Fluent Database Materials*Table1*Frame1*List1(Materials)\")(cx-gui-do cx-set-list-selections \"Fluent Database Materials*Table1*Frame1*List1(Materials)\" '( 85 563))(cx-gui-do cx-activate-item \"Fluent Database Materials*Table1*Frame1*List1(Materials)\")(cx-gui-do cx-set-list-selections \"Fluent Database Materials*Table1*Frame1*List1(Materials)\" '( 85 561 563))(cx-gui-do cx-activate-item \"Fluent Database Materials*Table1*Frame1*List1(Materials)\")(cx-gui-do cx-set-list-selections \"Fluent Database Materials*Table1*Frame1*List1(Materials)\" '( 85 561 562 563))(cx-gui-do cx-activate-item \"Fluent Database Materials*Table1*Frame1*List1(Materials)\")(cx-gui-do cx-activate-item \"Fluent Database Materials*PanelButtons*PushButton1(Close)\")")
setup1.SendCommand(Command='(cx-gui-do cx-set-text-entry "Create/Edit Materials*Table1*Frame1*Table1*TextEntry1(Name)" "water-liquid")(cx-gui-do cx-activate-item "Create/Edit Materials*PanelButtons*PushButton1(Close)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*PushButton1(Materials)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Materials)*PushButton1(Create/Edit)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-text-entry \"Create/Edit Materials*Table1*Frame1*Table1*TextEntry1(Name)\" \"water-liquid\")(cx-gui-do cx-set-real-entry-list \"Create/Edit Materials*RealEntry10\" '( 1000))(cx-gui-do cx-set-real-entry-list \"Create/Edit Materials*RealEntry12\" '( 4216))(cx-gui-do cx-set-real-entry-list \"Create/Edit Materials*RealEntry14\" '( 0.677))(cx-gui-do cx-set-text-entry \"Create/Edit Materials*Table1*Frame1*Table1*TextEntry1(Name)\" \"water\")(cx-gui-do cx-set-real-entry-list \"Create/Edit Materials*RealEntry16\" '( 0.0008))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Create/Edit Materials*PanelButtons*PushButton3(Change/Create)")(cx-gui-do cx-activate-item "Question*Cancel")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Create/Edit Materials*PanelButtons*PushButton1(Close)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*PushButton1(Zones)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Zones)*PushButton1(Cell Zones)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Boundary Conditions*Table1*List2(Zone)\" '( 0))(cx-gui-do cx-activate-item \"Boundary Conditions*Table1*List2(Zone)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Boundary Conditions*Table1*Table3*Table4*ButtonBox1*PushButton1(Edit)")(cx-gui-do cx-activate-tab-index "Fluid*Frame2*Table3*Frame1" 0)(cx-gui-do cx-activate-tab-index "Fluid*Frame2*Table3*Frame1" 1)(cx-gui-do cx-activate-tab-index "Fluid*Frame2*Table3*Frame1" 0)(cx-gui-do cx-activate-tab-index "Fluid*Frame2*Table3*Frame1" 2)(cx-gui-do cx-activate-tab-index "Fluid*Frame2*Table3*Frame1" 0)(cx-gui-do cx-activate-tab-index "Fluid*Frame2*Table3*Frame1" 2)(cx-gui-do cx-activate-tab-index "Fluid*Frame2*Table3*Frame1" 0)(cx-gui-do cx-activate-tab-index "Fluid*Frame2*Table3*Frame1" 3)(cx-gui-do cx-activate-tab-index "Fluid*Frame2*Table3*Frame1" 0)(cx-gui-do cx-activate-tab-index "Fluid*Frame2*Table3*Frame1" 4)(cx-gui-do cx-activate-tab-index "Fluid*Frame2*Table3*Frame1" 0)(cx-gui-do cx-activate-tab-index "Fluid*Frame2*Table3*Frame1" 5)(cx-gui-do cx-activate-tab-index "Fluid*Frame2*Table3*Frame1" 0)(cx-gui-do cx-activate-tab-index "Fluid*Frame2*Table3*Frame1" 6)(cx-gui-do cx-activate-tab-index "Fluid*Frame2*Table3*Frame1" 0)(cx-gui-do cx-activate-tab-index "Fluid*Frame2*Table3*Frame1" 7)(cx-gui-do cx-activate-tab-index "Fluid*Frame2*Table3*Frame1" 0)(cx-gui-do cx-activate-tab-index "Fluid*Frame2*Table3*Frame1" 8)(cx-gui-do cx-activate-tab-index "Fluid*Frame2*Table3*Frame1" 0)')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Fluid*Frame2*Table1*Table1*DropDownList1(Material Name)\" '( 0))(cx-gui-do cx-enable-apply-button \"Fluid\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Fluid*Frame2*Table1*Table1*DropDownList1(Material Name)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Fluid*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Fluid*PanelButtons*PushButton1(OK)")(cx-gui-do cx-enable-apply-button "Fluid")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Fluid*PanelButtons*PushButton1(OK)")(cx-gui-do cx-enable-apply-button "Fluid")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Fluid*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*PushButton1(Zones)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame3(Physics)*Table1*Table3(Zones)*PushButton2(Boundaries)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Boundary Conditions*Table1*List2(Zone)\" '( 3))(cx-gui-do cx-activate-item \"Boundary Conditions*Table1*List2(Zone)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Boundary Conditions*Table1*Table3*Table4*ButtonBox1*PushButton1(Edit)")(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 1)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 2)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 3)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 4)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 5)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 6)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 7)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)')
setup1.SendCommand(Command="(cx-gui-do cx-enable-apply-button \"Velocity Inlet\")(cx-gui-do cx-set-expression-entry \"Velocity Inlet*Frame2*Frame2*Frame1(Momentum)*Table1*Table8*ExpressionEntry1(Velocity Magnitude)\" '(\"0.4\" . 0))(cx-gui-do cx-set-list-selections \"Velocity Inlet*Frame2*Frame2*Frame1(Momentum)*Table1*Table4(Turbulence)*DropDownList1(Specification Method)\" '( 3))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Velocity Inlet*Frame2*Frame2*Frame1(Momentum)*Table1*Table4(Turbulence)*DropDownList1(Specification Method)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-expression-entry \"Velocity Inlet*Frame2*Frame2*Frame1(Momentum)*Table1*Table4(Turbulence)*ExpressionEntry11(Hydraulic Diameter)\" '(\"0.1\" . 0))(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 1)(cx-gui-do cx-set-expression-entry \"Velocity Inlet*Frame2*Frame2*Frame2(Thermal)*Table1*Table1*ExpressionEntry1(Temperature)\" '(\"293.15\" . 0))(cx-gui-do cx-activate-item \"Velocity Inlet*PanelButtons*PushButton1(OK)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Velocity Inlet*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Velocity Inlet*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Boundary Conditions*Table1*List2(Zone)\" '( 4))(cx-gui-do cx-activate-item \"Boundary Conditions*Table1*List2(Zone)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Boundary Conditions*Table1*Table3*Table4*ButtonBox1*PushButton1(Edit)")(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 1)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 2)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 3)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 4)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 5)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 6)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 7)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)')
setup1.SendCommand(Command="(cx-gui-do cx-enable-apply-button \"Velocity Inlet\")(cx-gui-do cx-set-expression-entry \"Velocity Inlet*Frame2*Frame2*Frame1(Momentum)*Table1*Table8*ExpressionEntry1(Velocity Magnitude)\" '(\"1.2\" . 0))(cx-gui-do cx-set-list-selections \"Velocity Inlet*Frame2*Frame2*Frame1(Momentum)*Table1*Table4(Turbulence)*DropDownList1(Specification Method)\" '( 3))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Velocity Inlet*Frame2*Frame2*Frame1(Momentum)*Table1*Table4(Turbulence)*DropDownList1(Specification Method)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-expression-entry \"Velocity Inlet*Frame2*Frame2*Frame1(Momentum)*Table1*Table4(Turbulence)*ExpressionEntry11(Hydraulic Diameter)\" '(\"0.1\" . 0))(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 1)(cx-gui-do cx-set-expression-entry \"Velocity Inlet*Frame2*Frame2*Frame2(Thermal)*Table1*Table1*ExpressionEntry1(Temperature)\" '(\"313.15\" . 0))(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 1)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-set-expression-entry \"Velocity Inlet*Frame2*Frame2*Frame1(Momentum)*Table1*Table4(Turbulence)*ExpressionEntry11(Hydraulic Diameter)\" '(\"0.025\" . 0))(cx-gui-do cx-activate-item \"Velocity Inlet*PanelButtons*PushButton1(OK)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Velocity Inlet*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Velocity Inlet*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Boundary Conditions*Table1*List2(Zone)\" '( 1))(cx-gui-do cx-activate-item \"Boundary Conditions*Table1*List2(Zone)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Boundary Conditions*Table1*Table3*Table4*ButtonBox1*PushButton1(Edit)")(cx-gui-do cx-activate-tab-index "Pressure Outlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Pressure Outlet*Frame2*Frame2" 1)(cx-gui-do cx-activate-tab-index "Pressure Outlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Pressure Outlet*Frame2*Frame2" 2)(cx-gui-do cx-activate-tab-index "Pressure Outlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Pressure Outlet*Frame2*Frame2" 3)(cx-gui-do cx-activate-tab-index "Pressure Outlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Pressure Outlet*Frame2*Frame2" 4)(cx-gui-do cx-activate-tab-index "Pressure Outlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Pressure Outlet*Frame2*Frame2" 5)(cx-gui-do cx-activate-tab-index "Pressure Outlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Pressure Outlet*Frame2*Frame2" 6)(cx-gui-do cx-activate-tab-index "Pressure Outlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Pressure Outlet*Frame2*Frame2" 7)(cx-gui-do cx-activate-tab-index "Pressure Outlet*Frame2*Frame2" 0)')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Pressure Outlet*Frame2*Frame2*Frame1(Momentum)*Table1*Table3(Turbulence)*DropDownList1(Specification Method)\" '( 3))(cx-gui-do cx-enable-apply-button \"Pressure Outlet\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Pressure Outlet*Frame2*Frame2*Frame1(Momentum)*Table1*Table3(Turbulence)*DropDownList1(Specification Method)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-expression-entry \"Pressure Outlet*Frame2*Frame2*Frame1(Momentum)*Table1*Table3(Turbulence)*ExpressionEntry11(Backflow Hydraulic Diameter)\" '(\"0.1\" . 0))(cx-gui-do cx-activate-item \"Pressure Outlet*PanelButtons*PushButton1(OK)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Pressure Outlet*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame5(Solution)*Table1*Table3(Solution)*PushButton1(Methods)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Solution Methods*Table1*Table2(Pressure-Velocity Coupling)*DropDownList2(Scheme)\" '( 0))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Solution Methods*Table1*Table2(Pressure-Velocity Coupling)*DropDownList2(Scheme)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Solution Methods*Table1*Table3(Spatial Discretization)*DropDownList1(Gradient)\" '( 1))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Solution Methods*Table1*Table3(Spatial Discretization)*DropDownList1(Gradient)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame5(Solution)*Table1*Table3(Reports)*PushButton1(Residuals)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Residual Monitors*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame5(Solution)*Table1*PushButton1(Reports)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame5(Solution)*Table1*Table3(Reports)*PushButton2(Definitions)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*Surface ReportSubMenu*Facet Maximum...")')
setup1.SendCommand(Command='(cx-gui-do cx-set-text-entry "Surface Report Definition*Table1*Table1*TextEntry1(Name)" "temp-outlet-0")(cx-gui-do cx-activate-item "Surface Report Definition*Table1*Table1*TextEntry1(Name)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "Surface Report Definition*Table1*Table1*Table6(Create)*CheckButton1(Report File)" #t)(cx-gui-do cx-activate-item "Surface Report Definition*Table1*Table1*Table6(Create)*CheckButton1(Report File)")(cx-gui-do cx-set-toggle-button2 "Surface Report Definition*Table1*Table1*Table6(Create)*CheckButton2(Report Plot)" #t)(cx-gui-do cx-activate-item "Surface Report Definition*Table1*Table1*Table6(Create)*CheckButton2(Report Plot)")(cx-gui-do cx-set-integer-entry "Surface Report Definition*Table1*Table1*Table6(Create)*IntegerEntry3(Frequency)" 2)(cx-gui-do cx-activate-item "Surface Report Definition*Table1*Table1*Table6(Create)*IntegerEntry3(Frequency)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Surface Report Definition*Table1*Table1*Table6(Create)*IntegerEntry3(Frequency)" 3)(cx-gui-do cx-activate-item "Surface Report Definition*Table1*Table1*Table6(Create)*IntegerEntry3(Frequency)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Surface Report Definition*Table1*Table2*DropDownList3(Field Variable)\" '( 3))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Surface Report Definition*Table1*Table2*DropDownList3(Field Variable)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Surface Report Definition*Table1*Table2*Table6*List1(Surfaces)\" '( 0))(cx-gui-do cx-activate-item \"Surface Report Definition*Table1*Table2*Table6*List1(Surfaces)\")(cx-gui-do cx-activate-item \"Surface Report Definition*PanelButtons*PushButton1(OK)\")")
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Monitors|Report Files|temp-outlet-0-rfile"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Monitors|Report Files|temp-outlet-0-rfile"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Monitors|Report Files|temp-outlet-0-rfile"))(cx-gui-do cx-activate-item "Edit Report File*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Monitors|Report Plots|temp-outlet-0-rplot"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Monitors|Report Plots|temp-outlet-0-rplot"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Monitors|Report Plots|temp-outlet-0-rplot"))(cx-gui-do cx-activate-item "Edit Report Plot*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame5(Solution)*Table1*PushButton1(Initialization)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame5(Solution)*Table1*Table3(Initialization)*PushButton5(Initialize)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame5(Solution)*Table1*PushButton1(Run Calculation)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame5(Solution)*Table1*Table3(Run Calculation)*PushButton4(Check Case)")(cx-gui-do cx-activate-tab-index "Case Check*Table1*Frame1" 0)(cx-gui-do cx-activate-tab-index "Case Check*Table1*Frame1" 1)(cx-gui-do cx-activate-tab-index "Case Check*Table1*Frame1" 0)(cx-gui-do cx-activate-tab-index "Case Check*Table1*Frame1" 2)(cx-gui-do cx-activate-tab-index "Case Check*Table1*Frame1" 0)(cx-gui-do cx-activate-tab-index "Case Check*Table1*Frame1" 3)(cx-gui-do cx-activate-tab-index "Case Check*Table1*Frame1" 0)(cx-gui-do cx-activate-tab-index "Case Check*Table1*Frame1" 4)(cx-gui-do cx-activate-tab-index "Case Check*Table1*Frame1" 0)(cx-gui-do cx-activate-tab-index "Case Check*Table1*Frame1" 1)')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Case Check*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame5(Solution)*Table1*PushButton1(Run Calculation)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Ribbon*Frame1*Frame5(Solution)*Table1*Table3(Run Calculation)*Table6*IntegerEntry16(No  of Iterations)" 300)(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame5(Solution)*Table1*Table3(Run Calculation)*Table6*IntegerEntry16(No  of Iterations)")')
setup1.SendCommand(Command="(cx-gui-do cx-activate-item \"Ribbon*Frame1*Frame5(Solution)*Table1*Table3(Run Calculation)*PushButton7(Calculate)\")(cx-use-window-id 1)(cx-use-window-id 2)(cx-set-camera-relative '(-3.56795 -10.7461 -10.1573) '(0 0 0) '(0.615461 0.0624953 -0.128001) 0 0)(cx-use-window-id 1)(build-popup-menu)(cx-use-window-id 2)(cx-use-window-id 51)(handle-key \"control ??\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Information*OK")(cx-use-window-id 1)(build-popup-menu)(cx-use-window-id 1)')
setup1.SendCommand(Command="(cx-use-window-id 1)")
setup1.SendCommand(Command="(cx-use-window-id 1)(build-popup-menu)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "ToolBar*Pointer*rotate")')
setup1.SendCommand(Command="(cx-use-window-id 1)(cx-set-camera-relative '(-0.1661 2.04915 -0.42523) '(0 0 0) '(-0.0108495 0.185711 0.904492) 0 0)(cx-gui-do cx-set-list-tree-selections \"NavigationPane*List_Tree1\" (list \"Results|Graphics|Contours\"))")
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Results|Graphics|Contours"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Results|Graphics|Contours"))')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Contours*Table1*Frame3*Table1*DropDownList1(Contours of)\" '( 2))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Contours*Table1*Frame3*Table1*DropDownList1(Contours of)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Contours*Table1*Frame3*Frame2*List2(Surfaces)\" '( 1))(cx-gui-do cx-activate-item \"Contours*Table1*Frame3*Frame2*List2(Surfaces)\")(cx-gui-do cx-activate-item \"Contours*PanelButtons*PushButton1(OK)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Contours*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Contours*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "ToolBar*Pointer*rollzoom")')
setup1.SendCommand(Command="(cx-use-window-id 51)(cxg-clear-all-selections (cx-active-window))(cxg-add-surfaces-to-selection '(symmetry) (cx-active-window))(cx-use-window-id 51)(build-popup-menu)(cx-use-window-id 51)(build-popup-menu)(cx-use-window-id 51)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "ToolBar*Pointer*rotate")')
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(-2.71806 0.537737 2.02033) '(0 0 0) '(0.280267 -0.999668 -1.19842) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.81483 -0.827098 1.38107) '(0 0 0) '(-1.36295 -0.12745 0.803979) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-0.953914 0.300757 -0.679016) '(0 0 0) '(0.731945 0.893665 -0.528893) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(7.55181 -0.191274 -10.357) '(0 0 0) '(0.28988 0.273842 0.564781) 0 0)(cx-use-window-id 51)(cx-gui-do cx-set-list-tree-selections \"NavigationPane*List_Tree1\" (list \"Results|Graphics|Contours\"))")
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Results|Graphics|Contours"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Results|Graphics|Contours"))')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Contours*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Contours*Table1*Frame3*Frame2*List2(Surfaces)\" '( 1))(cx-gui-do cx-activate-item \"Contours*Table1*Frame3*Frame2*List2(Surfaces)\")(cx-gui-do cx-activate-item \"Contours*PanelButtons*PushButton1(OK)\")(cxg-clear-all-selections (cx-active-window))(cxg-add-surfaces-to-selection '() (cx-active-window))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Contours*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-use-window-id 51)(cx-use-window-id 51)(cx-set-camera-relative '(6.85476 4.70779 9.21486) '(0 0 0) '(-0.486471 -0.157347 -0.236123) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-4.78559 -4.38984 6.49712) '(0 0 0) '(0.310866 0.149962 0.395136) 0 0)(cx-gui-do cx-set-list-tree-selections \"NavigationPane*List_Tree1\" (list \"Results|Graphics|Contours|contour-1\"))(cx-gui-do cx-set-list-tree-selections \"NavigationPane*List_Tree1\" (list \"Results|Graphics|Contours|contour-2\"))(cx-gui-do cx-set-list-tree-selections \"NavigationPane*List_Tree1\" (list \"Results|Graphics|Contours\"))")
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Results|Graphics|Contours"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Results|Graphics|Contours"))')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Contours*Table1*Frame3*Table1*DropDownList1(Contours of)\" '( 3))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Contours*Table1*Frame3*Table1*DropDownList1(Contours of)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Contours*Table1*Frame3*Frame2*List2(Surfaces)\" '( 1))(cx-gui-do cx-activate-item \"Contours*Table1*Frame3*Frame2*List2(Surfaces)\")(cx-gui-do cx-activate-item \"Contours*PanelButtons*PushButton1(OK)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Contours*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")(cx-gui-do cx-activate-item "Settings have changed!*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")(cx-gui-do cx-activate-item "Settings have changed!*PanelButtons*PushButton1(OK)")')
results1 = system1.GetContainer(ComponentName="Results")
results1.Edit()
results1.SendCommand(Command="""VIEW:View 1
  Camera Mode = User Specified
  CAMERA:
    Option = Pivot Point and Quaternion
    Pivot Point = 0, -0.0125, 0.025
    Scale = 4.27807
    Pan = 0, 0
    Rotation Quaternion = 0, 0, 0, 1
    
  END

END

VIEW:View 1
  Light Angle = 50, 110
END

VIEW:View 2
  Light Angle = 50, 110
END

VIEW:View 3
  Light Angle = 50, 110
END

VIEW:View 4
  Light Angle = 50, 110
END

> update
> autolegend plot=/CONTOUR:Contour 1, view=VIEW:View 1""")
results1.SendCommand(Command="""CONTOUR:Contour 1
Apply Instancing Transform = On
Clip Contour = Off
Colour Map = Default Colour Map
Colour Scale = Linear
Colour Variable = Velocity
Colour Variable Boundary Values = Conservative
Constant Contour Colour = Off
Contour Range = Global
Culling Mode = No Culling
Domain List = fluid
Draw Contours = On
Font = Sans Serif
Fringe Fill = On
Instancing Transform = /DEFAULT INSTANCE TRANSFORM:Default Transform
Lighting = On
Line Colour = 0, 0, 0
Line Colour Mode = Default
Line Width = 1
Location List = symmetry
Max = 0.0 [m s^-1]
Min = 0.0 [m s^-1]
Number of Contours = 11
Show Numbers = Off
Specular Lighting = On
Surface Drawing = Smooth Shading
Text Colour = 0, 0, 0
Text Colour Mode = Default
Text Height = 0.024
Transparency = 0.0
Use Face Values = Off
Value List = 0 [m s^-1],1 [m s^-1]
  OBJECT VIEW TRANSFORM:
  Apply Reflection = Off
  Apply Rotation = Off
  Apply Scale = Off
  Apply Translation = Off
  Principal Axis = Z
  Reflection Plane Option = XY Plane
  Rotation Angle = 0.0 [degree]
  Rotation Axis From = 0 [m], 0 [m], 0 [m]
  Rotation Axis To = 0 [m], 0 [m], 0 [m]
  Rotation Axis Type = Principal Axis
  Scale Vector = 1 , 1 , 1 
  Translation Vector = 0 [m], 0 [m], 0 [m]
  X = 0.0 [m]
  Y = 0.0 [m]
  Z = 0.0 [m]
  END
END""")
results1.SendCommand(Command="""# Sending visibility action from ViewUtilities
>show /CONTOUR:Contour 1, view=/VIEW:View 1""")
results1.SendCommand(Command="""# Sending visibility action from ViewUtilities
>hide /CONTOUR:Contour 1, view=/VIEW:View 1""")
results1.SendCommand(Command="> autolegend plot=/CONTOUR:Contour 2, view=VIEW:View 1")
results1.SendCommand(Command="""CONTOUR:Contour 2
Apply Instancing Transform = On
Clip Contour = Off
Colour Map = Default Colour Map
Colour Scale = Linear
Colour Variable = Temperature
Colour Variable Boundary Values = Conservative
Constant Contour Colour = Off
Contour Range = Global
Culling Mode = No Culling
Domain List = fluid
Draw Contours = On
Font = Sans Serif
Fringe Fill = On
Instancing Transform = /DEFAULT INSTANCE TRANSFORM:Default Transform
Lighting = On
Line Colour = 0, 0, 0
Line Colour Mode = Default
Line Width = 1
Location List = symmetry
Max = 0.0 [K]
Min = 0.0 [K]
Number of Contours = 11
Show Numbers = Off
Specular Lighting = On
Surface Drawing = Smooth Shading
Text Colour = 0, 0, 0
Text Colour Mode = Default
Text Height = 0.024
Transparency = 0.0
Use Face Values = Off
Value List = 0 [K],1 [K]
  OBJECT VIEW TRANSFORM:
  Apply Reflection = Off
  Apply Rotation = Off
  Apply Scale = Off
  Apply Translation = Off
  Principal Axis = Z
  Reflection Plane Option = XY Plane
  Rotation Angle = 0.0 [degree]
  Rotation Axis From = 0 [m], 0 [m], 0 [m]
  Rotation Axis To = 0 [m], 0 [m], 0 [m]
  Rotation Axis Type = Principal Axis
  Scale Vector = 1 , 1 , 1 
  Translation Vector = 0 [m], 0 [m], 0 [m]
  X = 0.0 [m]
  Y = 0.0 [m]
  Z = 0.0 [m]
  END
END""")
results1.SendCommand(Command="""# Sending visibility action from ViewUtilities
>show /CONTOUR:Contour 2, view=/VIEW:View 1""")
results1.Exit()
system1.Copy(KeepConnections=True)
system2 = GetSystem(Name="FFF 1")
geometry2 = system2.GetContainer(ComponentName="Geometry")
geometry2.Edit()
geometry2.Exit()
meshComponent2 = system2.GetComponent(Name="Mesh")
meshComponent2.Update(AllDependencies=True)
setupComponent2 = system2.GetComponent(Name="Setup")
setupComponent2.Refresh()
setup2 = system2.GetContainer(ComponentName="Setup")
fluentLauncherSettings2 = setup2.GetFluentLauncherSettings()
fluentLauncherSettings2.SetEntityProperties(Properties=Set(EnvPath={}))
setup2.Edit()
setup2.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup2.SendCommand(Command='/file/set-tui-version "21.1"(cx-gui-do cx-activate-item "Key Behavioral Changes*PanelButtons*PushButton1(OK)")')
setup2.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Domain)*Table1*Table3(Mesh)*PushButton3(Units)")')
setup2.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Set Units*List1(Quantities)\" '( 43))(cx-gui-do cx-activate-item \"Set Units*List1(Quantities)\")(cx-gui-do cx-activate-item \"Set Units*PanelButtons*PushButton2(Cancel)\")")
setup2.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Domain)*Table1*Table3(Mesh)*PushButton4(Check)")')
setup2.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*PopupMenuCheck*Perform Mesh Check")')
setup2.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Domain)*Table1*Table3(Mesh)*PushButton5(  Quality)")')
setup2.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*PopupMenuQuality*Evaluate Mesh Quality")')
setup2.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list ))(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Boundary Conditions|Inlet|velocity-inlet-large (velocity-inlet, id=6)"))(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Boundary Conditions|Inlet|velocity-inlet-small (velocity-inlet, id=7)"))')
setup2.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Boundary Conditions|Inlet|velocity-inlet-small (velocity-inlet, id=7)"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup2.SendCommand(Command="(cx-gui-do cx-set-list-tree-selections \"NavigationPane*List_Tree1\" (list \"Setup|Boundary Conditions|Inlet|velocity-inlet-small (velocity-inlet, id=7)\"))(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 1)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 2)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 3)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 4)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 5)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 6)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 7)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-enable-apply-button \"Velocity Inlet\")(cx-gui-do cx-set-expression-entry \"Velocity Inlet*Frame2*Frame2*Frame1(Momentum)*Table1*Table4(Turbulence)*ExpressionEntry11(Hydraulic Diameter)\" '(\"0.038\" . 0))(cx-gui-do cx-activate-item \"Velocity Inlet*PanelButtons*PushButton1(OK)\")")
setup2.SendCommand(Command='(cx-gui-do cx-activate-item "Velocity Inlet*PanelButtons*PushButton2(Cancel)")')
setup2.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame5(Solution)*Table1*PushButton1(Initialization)")')
setup2.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame5(Solution)*Table1*Table3(Initialization)*PushButton5(Initialize)")')
setup2.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame5(Solution)*Table1*PushButton1(Run Calculation)")')
setup2.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame5(Solution)*Table1*Table3(Run Calculation)*PushButton7(Calculate)")')
setup2.SendCommand(Command='(cx-gui-do cx-activate-item "Information*OK")')
setup2.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
solution1 = system2.GetContainer(ComponentName="Solution")
solution1.Edit()
setup2.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup2.SendCommand(Command='/file/set-tui-version "21.1"(cx-gui-do cx-activate-item "Key Behavioral Changes*PanelButtons*PushButton1(OK)")')
setup2.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
results2 = system2.GetContainer(ComponentName="Results")
results2.Edit()
results2.Exit()
template2 = GetTemplate(TemplateName="Results")
system3 = template2.CreateSystem(
    Position="Right",
    RelativeTo=system1)
solutionComponent1 = system1.GetComponent(Name="Solution")
resultsComponent1 = system3.GetComponent(Name="Results")
solutionComponent1.TransferData(TargetComponent=resultsComponent1)
solutionComponent2 = system2.GetComponent(Name="Solution")
solutionComponent2.TransferData(TargetComponent=resultsComponent1)
results3 = system3.GetContainer(ComponentName="Results")
results3.Edit()
results3.SendCommand(Command="""VIEW:View 1
  Camera Mode = User Specified
  CAMERA:
    Option = Pivot Point and Quaternion
    Pivot Point = 0, -0.0125, 0.025
    Scale = 3.43301
    Pan = 0, 0
    Rotation Quaternion = 0.279848, -0.364705, -0.115917, 0.880476
    
  END

END

> update
> autolegend plot=/CONTOUR:Contour 1, view=VIEW:View 1""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:velocity inlet large, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:velocity inlet large, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command="""CONTOUR:Contour 1
Apply Instancing Transform = On
Clip Contour = Off
Colour Map = Default Colour Map
Colour Scale = Linear
Colour Variable = Velocity
Colour Variable Boundary Values = Conservative
Constant Contour Colour = Off
Contour Range = Global
Culling Mode = No Culling
Domain List = fluid
Draw Contours = On
Font = Sans Serif
Fringe Fill = On
Instancing Transform = /DEFAULT INSTANCE TRANSFORM:Default Transform
Lighting = On
Line Colour = 0, 0, 0
Line Colour Mode = Default
Line Width = 1
Location List = symmetry
Max = 0.0 [m s^-1]
Min = 0.0 [m s^-1]
Number of Contours = 11
Show Numbers = Off
Specular Lighting = On
Surface Drawing = Smooth Shading
Text Colour = 0, 0, 0
Text Colour Mode = Default
Text Height = 0.024
Transparency = 0.0
Use Face Values = Off
Value List = 0 [m s^-1],1 [m s^-1]
  OBJECT VIEW TRANSFORM:
  Apply Reflection = Off
  Apply Rotation = Off
  Apply Scale = Off
  Apply Translation = Off
  Principal Axis = Z
  Reflection Plane Option = XY Plane
  Rotation Angle = 0.0 [degree]
  Rotation Axis From = 0 [m], 0 [m], 0 [m]
  Rotation Axis To = 0 [m], 0 [m], 0 [m]
  Rotation Axis Type = Principal Axis
  Scale Vector = 1 , 1 , 1 
  Translation Vector = 0 [m], 0 [m], 0 [m]
  X = 0.0 [m]
  Y = 0.0 [m]
  Z = 0.0 [m]
  END
END""")
results3.SendCommand(Command="""# Sending visibility action from ViewUtilities
>show /CONTOUR:Contour 1, view=/VIEW:View 1""")
results3.SendCommand(Command="""VIEW:View 1
  Camera Mode = User Specified
  CAMERA:
    Option = Pivot Point and Quaternion
    Pivot Point = 0, -0.0125, 0.025
    Scale = 4.51575
    Pan = 0, 0
    Rotation Quaternion = 0, 0, 0, 1
    
  END

END

VIEW:View 2
  Camera Mode = User Specified
  CAMERA:
    Option = Pivot Point and Quaternion
    Pivot Point = -7.45058e-09, -0.0125, 0.025
    Scale = 4.53471
    Pan = 0, 0
    Rotation Quaternion = 0, 0, 0, 1
    
  END

END

> update
>highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command="""# Sending visibility action from ViewUtilities
>hide /CONTOUR:Contour 1, view=/VIEW:View 2""")
results3.SendCommand(Command="> autolegend plot=/CONTOUR:Contour 2, view=VIEW:View 2")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:velocity inlet large, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:velocity inlet large, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:pressure outlet, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command=""">highlight regionlist=/DATA READER/CASE:Case elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case Copy of elbow/DOMAIN:fluid
>highlight regionlist=/DATA READER/CASE:Case Copy of elbow/BOUNDARY:symmetry, domainlist=/DATA READER/CASE:Case elbow/DOMAIN:fluid""")
results3.SendCommand(Command="""CONTOUR:Contour 2
Apply Instancing Transform = On
Clip Contour = Off
Colour Map = Default Colour Map
Colour Scale = Linear
Colour Variable = Temperature
Colour Variable Boundary Values = Conservative
Constant Contour Colour = Off
Contour Range = Global
Culling Mode = No Culling
Domain List = fluid
Draw Contours = On
Font = Sans Serif
Fringe Fill = On
Instancing Transform = /DEFAULT INSTANCE TRANSFORM:Default Transform
Lighting = On
Line Colour = 0, 0, 0
Line Colour Mode = Default
Line Width = 1
Location List = symmetry
Max = 0.0 [K]
Min = 0.0 [K]
Number of Contours = 11
Show Numbers = Off
Specular Lighting = On
Surface Drawing = Smooth Shading
Text Colour = 0, 0, 0
Text Colour Mode = Default
Text Height = 0.024
Transparency = 0.0
Use Face Values = Off
Value List = 0 [K],1 [K]
  OBJECT VIEW TRANSFORM:
  Apply Reflection = Off
  Apply Rotation = Off
  Apply Scale = Off
  Apply Translation = Off
  Principal Axis = Z
  Reflection Plane Option = XY Plane
  Rotation Angle = 0.0 [degree]
  Rotation Axis From = 0 [m], 0 [m], 0 [m]
  Rotation Axis To = 0 [m], 0 [m], 0 [m]
  Rotation Axis Type = Principal Axis
  Scale Vector = 1 , 1 , 1 
  Translation Vector = 0 [m], 0 [m], 0 [m]
  X = 0.0 [m]
  Y = 0.0 [m]
  Z = 0.0 [m]
  END
END""")
results3.SendCommand(Command="""# Sending visibility action from ViewUtilities
>show /CONTOUR:Contour 2, view=/VIEW:View 2""")
results3.Exit()
Save(Overwrite=True)
